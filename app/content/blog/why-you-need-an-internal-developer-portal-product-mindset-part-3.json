{
  "publishedAt": "11th Apr 2021",
  "title": "Why You Need an Internal Developer Portal: Product Mindset (Part 3)",
  "seoDescription": "The best thing you can do for your developers is to free them from the tyranny of managing infrastructure. But how?",
  "featuredImage": "/images/uploads/architecture-train-ride-railway-station-platform-bahnsteigkante-railway-traffic.jpg",
  "content": "Now that we've established why you need a developer portal and what a developer portal looks like in the wild, let's talk about how to think about building one for your enterprise. \n\nTo start, this is definitely not a simple project. You have three sets of primary stakeholders - Developers, Architects, and Infrastructure/DevOps.\n\n**Developers:** I want to forget about infrastructure and focus on building and shipping products. \n\n**Architects:** I want to create guardrails and standards for my organization that creates a balance between security, resiliency, value, and velocity.\n\n**Infrastructure/DevOps:** I want to provide & maintain the infrastructure that delivers on the product experiences developers are creating while adhering to the architecture standards defined by the Architects. \n\nHere's the value that (generally) each set of stakeholders should get out of a developer portal.\n\n**Developers:** Provides a single pane of glass for how developers interact with \"infrastructure\", including discovering services & related documentation, setting up & viewing the results of CI/CD, and a single place to view all the deployed \"services\" that make up an application.   \n\n**Architects:** Provides a way to *programmatically* provide architectural standards to developers through logical, easy to deploy defaults. Create a single source of truth to detect drift and automate remediation steps.\n\n**Infrastructure/DevOps**: Creates consistency between different applications maintained between teams, minimizing duplication of work. Creates a single source of truth to more easily understand a deployed application to aid in debugging of production systems, making it easier to maintain systems without involving developers.\n\nThis isn't easy and every organization should have a developer portal that reflects how they build and deliver software, there's no one-size-fit-all solution. If you're in a highly regulated industry (FinServ, Healthcare), you have very different requirements from a startup that's built in the cloud or an industrial company who is primarily leveraging on-premise infrastructure.  \n\nThis should also be an agile and iterative process. If you're planning to build something in a silo and launch it 12 months later, get ready to satisfy a grand total of zero stakeholders... \n\nInstead your process should look something like this. \n\n**Define the Product Owner, Stakeholders**\n\nWith all these stakeholders, you need to define a single threaded product owner who is responsible for understanding the needs of all the stakeholders and creating the overall vision for delivery. You generally don't want any of the stakeholders to play this role.\n\n**Discovery**\n\nThe product owner, with deputized stakeholders acting as \"tour guides\", needs to create a deep understanding of the specifics of what each set of stakeholders is doing today and what they care about. What tools are already in use? What do people hate? What do people love? \n\nIn addition to understanding the state of affairs, it's also important to understand & define the future vision of what good looks like for the organization. Where do we see software delivery going? This will help later on to prioritize. \n\n**Define Your Ideal State**\n\nAfter the product owner understands the stakeholders, they should define the ideal state. This is NOT mock-ups, designs, or visuals. Use a tool like the [PRFAQ process](https://medium.com/agileinsider/press-releases-for-product-managers-everything-you-need-to-know-942485961e31) to solidify the value proposition that you'll deliver for your stakeholders. This will become the northstar document that the stakeholders can rally around, creating clarity in what value you'll actually deliver. \n\n**Build, Iteratively**\n\nThis is familiar to anyone who subscribes to agile development, but focus on delivering value as quickly as possible. You want to get feedback quickly on what you're building. Focus on delivering enough value for a few early adopter teams to begin putting it through it's paces and getting some kind of value, don't wait to solve everyone's use case. \n\n**Measure Adoption & Build Feedback Loops**\n\nThe product owner should focus on measuring adoption of the platform. This isn't just \"how many developers have accounts\", this is granular. How often do developers login? Are developers using this is their primary interface for deploying software? What use cases are developers needing to use other systems for? Are their opportunities to create additional abstractions? \n\n**Conclusion**\n\nA developer portal can be the answer to organizations that are looking to unlock the real value of being \"cloud native\" and truly empower their developers to quickly delivery business value. This isn't choosing a piece of \"technology\" though, this is about using technology empower people and drive organizational change."
}