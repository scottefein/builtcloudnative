{
  "publishedAt": "11th Apr 2021",
  "title": "Why You Need an Internal Developer Platform: The Problem (Part 1)",
  "featuredImage": "/images/uploads/architecture-train-ride-railway-station-platform-bahnsteigkante-railway-traffic.jpg",
  "seoDescription": "The best thing you can do for your developers is to free them from the tyranny of managing infrastructure. But how?",
  "content": "Since the launch of \"clouds\" over the past 15 years, it's never been easier for a developer to build software and run it. You don't need to buy computers, rent space in a colo facility to power and store them, network them, and spend ridiculous amounts of money on software to make them run. It only gets more complicated when you're a real company and are now dealing with databases, virtualization, managing VMs, security, backup & recovery, and all the aspects that allow you to run software that's *reliable*. So we hired whole teams of \"IT Infrastructure\" folks who specialized in networking, virtualization, databases, and data center management who made it all tick. \n\nOh and at some point I guess you had to write some code to build an application for your business?\n\nNowadays, all you need is a credit card and you too can have access to the untapped resources of the cloud. *fin*\n\nThat's the dream at least. Any real enterprise architect knows there's a lot more to it. You still have to worry about security, but it's a shared responsibility model now. You don't have to worry about plugging in switches, but you do get to configure your VPC, setup peering, and IP exhaustion is still a thing (hello Kubernetes, stop eating my IP range). Luckily, we've hired \"DevOps\" and \"Cloud\" engineers make it all tick.\n\nSound familiar?\n\nThe problem is, we're still not helping developers build software faster. Instead they spend a lot of time writing (or more likely, copying and pasting) infrastructure-as-code, setting up their applications to meet \"enterprise standards\", and trying to debug their applications in production with the limited access provided to them because \"they don't need it\". And don't even get started on all the SaaS providers developers need to interact with...\n\nThe answer to this problem is often described as \"GitOps\" or \"Kubernetes\" or \"CI/CD\" and that's all correct. You want all of those. Or none of those. But however your *organization* has chosen to build software needs to be embedded not only in your architecture documents and \"approved\" software choices, but surfaced to your developers in a consistent experience that empowers them to take advantage of all the hard work your architecture team has done. \n\nThis allows developers to actually build on the shoulders of giants to build & iterate on software quickly, and it forces architecture teams to present a cohesive solution to developers that lets them forget about infrastructure. These solutions, which we'll call \"developer portals\", become the enabler of developers and the mechanism that allows architects to quickly impact their whole organization. \n\nIn the next post, we'll talk about what these portals can look like and how they can enable innovation in your organization."
}